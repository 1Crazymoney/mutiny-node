FROM rustlang/rust:nightly as builder

# Make a fake Rust app to keep a cached layer of compiled crates
RUN USER=root cargo new app
WORKDIR /usr/src/app
RUN mkdir websocket-tcp-proxy
COPY Cargo.toml Cargo.lock ./
COPY node-manager/Cargo.toml ./node-manager/
COPY websocket-tcp-proxy/Cargo.toml ./websocket-tcp-proxy/
# Needs at least a main.rs file with a main function
# Since this is a rust workspace, we need to init the other things too
RUN mkdir node-manager/src && echo "fn main(){}" > node-manager/src/lib.rs
RUN mkdir websocket-tcp-proxy/src && echo "fn main(){}" > websocket-tcp-proxy/src/main.rs
# Will build all dependent crates in release mode
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    --mount=type=cache,target=/usr/src/app/target \
    cargo build -p websocket-tcp-proxy --release

# Copy the rest
COPY . .
# Build (install) the actual binaries
RUN cargo install --path ./websocket-tcp-proxy

# Runtime image
FROM debian:bullseye-slim

# Some general ENVs
ENV RUST_LOG=debug
ENV MUTINY_PROXY_PORT=8080

# Run as "app" user
RUN useradd -ms /bin/bash app

USER app
WORKDIR /app

# Get compiled binaries from builder's cargo install directory
COPY --from=builder /usr/local/cargo/bin/websocket-tcp-proxy /app/websocket-tcp-proxy

# No CMD or ENTRYPOINT, see fly.toml with `cmd` override.
ENTRYPOINT [ "/app/websocket-tcp-proxy" ]
